#include "Object.h"



Object::Object(int x, int y, float mass, float velocity)
{
	//m_p = {0,0};
	m_mouseMovable = false;
	m_gravity = 0;
	m_force = false;
	m_movableHor = true;
	m_movableVer = true;
	m_x = x;
	m_y = y;
	m_mass = mass;
	m_velocity = velocity;
	int m_dx = 0;
	int m_dy = 0;
	k = 6;
	m_force = false;
}
void Object::Update(int x, int y)
{
	if (m_mouseMovable)
	{
		m_x = x + m_mouseOffsetX;
		m_y = y + m_mouseOffsetY;
		cout << "mouse\n";
	}
	if (m_force)
	{
		m_x = m_x + m_dx;
		m_y = m_y + m_dy;
		//cout<<"DXDY"<<m_dx <<"\t"<<m_dy <<"\n";
		if(!( m_dx && m_dy))
		setGravity();
	}
	if(m_gravity)
	{
		cout<<"heloo\n";
		m_y+= (float)1/2;
	}
}
void Object::infor()
{ 
	std::cout<<"Position:"<< m_x<<"\t"<<m_y<<std::endl;
	std::cout << "Mass:" << m_mass <<  std::endl;
	std::cout << "Velocity:" << m_velocity << std::endl;
}
Object::~Object()
{
}

void Object::Render()
{
	
}
bool Object::mouseCheck(int x, int y)
{	
	
	return 0;
}

bool Object::mouseMovable()
{
	return m_mouseMovable;
}

bool Object::resetMouseMovable()
{
	m_mouseMovable = 0;
	return 1;
}
void Object::setMovable()
{
	m_movableVer = 1;
}
void Object::resetMovable()
{
	m_movableVer =0;
}
vector<int>* Object::getData()
{
	vector<int> *t = new vector<int>;
	return t;
}
void Object::setForceAble()
{
	m_force = true;
	m_gravity = 0;
	m_mouseMovable = 0;
}
void Object::resetForceAble()
{
	m_force = false;
}
void Object::setDxDy(float x, float y)
{
	m_dx = x/k;
	m_dy = y/k;
}
bool Object::forceAble()
{
	return m_force;
}
void Object::setGravity()
{
	m_gravity = 1;
	m_force = 0;
	m_mouseMovable = 0;
}
void Object::resetGravity()
{
	m_gravity = 0;
}
void Object::setMouseMovable()
{
	m_mouseMovable = 1;
	m_gravity = 0;
	m_force = 0;

}

bool Object::gravityAble()
{
	return m_gravity;
}
float Object::getY()
{
	return m_y;
}
bool Object::smaller(Object* b)
{
	if( m_y < b->getY())
		return true;
	else
		return true;
}
bool Object::stsDxDy()
{
	if(m_dx == 0 && m_dy == 0)
	return 1;
}